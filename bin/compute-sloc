#!/usr/bin/env -S perl -w   # -*-Perl-*-

#         Copyright © 2015-2023 Tom Fontaine

# Title:  compute-sloc
# Author: Tom Fontaine
# Date:   20-Apr-2015

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software",
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# Except as contained in this notice, the name(s of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.

# The software is provided "As Is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall
# the authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising
# from, out of or in connection with the software or the use or other
# dealings in the software.

# Purpose:   Computes sloc for specified input and creates a report
#
# Arguments: dir1|file1 [dir2|file2 .. dirN|fileN]
#
# Revision: 18-Sep-2022 using ‘Util::GetOptNew’
#           03-May-2023 ‘Util::GetOpt’
#
use File::SLOC;
use List::Util qw(first);
use Util::GetOpt;
use strict;
use v5.10;

require 5.013006;

use constant _ME_ => $0 =~ m=([^/]+)$=;

if((@ARGV == 0) || ($ARGV[0] =~ /(?^:^(?:-(?:(?:-(?:h(?:elp)?|\?)|h(?:elp)?)$|\?)|\?$))/))
{
  say "\nUsage: ",_ME_," [switch1 .. switch4] dir1|file1 [dir2|file2 .. dirN|fileN]\n";
  say 'Switches:';
  say '    --spreadsheet, -s          - Generate output in spreadsheet format';
  say '    --exponent <exponent>      - COCOMO schedule exponent';
  say '    --factor   <factor>        - COCOMO schedule factor';
  say '    --outdir   <directory>     - Output directory for generated files';
  say "    --salary   <annual salary> - COCOMO personcost\n";
  say '    --details  <file>          - Name for SLOC details file';
  say "    --summary  <file>          - Name for SLOC summary file\n";
  exit;
}
my %option;

my $o = Util::GetOpt->new(option => \%option);

my @args2 = qw(factor exponent salary outdir details summary);
my @bare1 = qw(s);
my @bare2 = qw(spreadsheet);

$o->get(bare1 => \@bare1,bare2 => \@bare2,args2 => \@args2);

my $badswitch = first { substr($_,0,1) eq '-' } @ARGV;

die _ME_,": $badswitch is not a recognized switch!!!\n" if defined $badswitch;
die _ME_,": 'outdir' is not a directory!!!\n"           if exists $option{'outdir'} && !-d $option{'outdir'};

my $sloc = File::SLOC->new(dirs => [grep { -d } @ARGV],files => [grep { -e && !-d } @ARGV]);

$sloc->configure($option{$_});

$sloc->get;

if(exists $option{'s'} || exists $option{'spreadsheet'})
{
  $sloc->put;
}
else
{
  $sloc->show;
}
