#!/usr/bin/perl -w    # -*-Perl-*-

#              Copyright Â© 2015-2017 Tom Fontaine

# Title:       compute-sloc
# Author:      Tom Fontaine
# Date:        20-Apr-2015
# Time-stamp: <18-Jan-2017 18:14:12 EST, modified by Tom Fontaine>
#

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software",
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# Except as contained in this notice, the name(s of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.

# The software is provided "As Is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall
# the authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising
# from, out of or in connection with the software or the use or other
# dealings in the software.

#
# Purpose:   Computes sloc for specified input and creates a report
#
# Arguments: dir1|file1 [dir2|file2 .. dirN|fileN]
#
# Revision:
#
use File::SLOC;
use List::Util qw(first);
use Util::GetOpt;
use strict;
use v5.10;

require 5.013006;

use constant _ME_ => $0 =~ m=([^/]+)$=;

if((@ARGV == 0) || ($ARGV[0] =~ /(?^:^(?:-(?:(?:-(?:h(?:elp)?|\?)|h(?:elp)?)$|\?)|\?$))/))
{
  say "\nUsage: ",_ME_," [switch1 .. switch4] dir1|file1 [dir2|file2 .. dirN|fileN]\n";
  say 'Switches:';
  say '    --factor   <factor>        - COCOMO schedule factor';
  say '    --exponent <exponent>      - COCOMO schedule exponent';
  say "    --salary   <annual salary> - COCOMO personcost\n";
  say '    -s, --spreadsheet          - Generate output in spreadsheet format';
  say '    --outdir <directory>       - Output directory for generated files';
  say '    --details <file>           - Name for SLOC details file';
  say "    --summary <file>           - Name for SLOC summary file\n";
  exit;
}
my %option;

my @switchesArg = qw(--factor --exponent --salary --outdir --details --summary);

my $o = Util::GetOpt->new(args => \@ARGV,option => \%option);

$o->get(switchesBare => [qw(-s --spreadsheet)],switchesArg => \@switchesArg);

my $badswitch = first { substr($_,0,1) eq '-' } @ARGV;

die _ME_,": $badswitch is not a recognized switch!!!\n" if defined $badswitch;
die _ME_,": 'outdir' is not a directory!!!\n"           if exists $option{'--outdir'} && !-d $option{'--outdir'};

my %fieldSwitch = ('--factor'   => 'factor',
                   '--exponent' => 'exponent',
                   '--salary'   => 'salary',
                   '--outdir'   => 'outdir',
                   '--details'  => 'fileDetails',
                   '--summary'  => 'fileSummary',
                  );

my $sloc = File::SLOC->new(dirs => [grep { -d } @ARGV],files => [grep { -e && !-d } @ARGV]);

$sloc->configure(map { $fieldSwitch{$_} => $option{$_} } grep { exists $option{$_} } @switchesArg);

$sloc->get;

if(exists $option{'-s'} || exists $option{'--spreadsheet'})
{
  $sloc->put;
}
else
{
  $sloc->show;
}
