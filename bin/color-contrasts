#!/usr/bin/env -S perl -w   # -*-Perl-*-

#         Copyright Â© 2020-2023 Tom Fontaine

# Title:  color-distance
# Author: Tom Fontaine
# Date:   14-Sep-2020

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software",
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# Except as contained in this notice, the name(s of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.

# The software is provided "As Is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall
# the authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising
# from, out of or in connection with the software or the use or other
# dealings in the software.

#
# Purpose:
#
# Arguments:
#
# Revision:
#
use File::IO;
use Util::Color;
use strict;
use v5.10;

use constant _ME_ => $0 =~ m=([^/]+)$=;

use constant BLACK => '000000';
use constant GRAY  => 'c0c0c0';
use constant WHITE => 'ffffff';

my @keys = qw(NAME VALUE TYPE SHADE HUE SATURATION LUMINOSITY CONTRAST_BLACK CONTRAST_WHITE CONTRAST_GRAY DISTANCE_BLACK);

my $io    = File::IO->new();
my $color = Util::Color->new(file => $io);

my @color;

$color->parseThemeColors();

for(@{$color->colors})
{
  my $value = $_->{VALUE};

  my ($hue,$saturation,$luminosity) = $color->computeHSL(value => $value);

  $_->{HUE}            = sprintf('%3d',$hue);
  $_->{SATURATION}     = sprintf('%4.2f',$saturation);
  $_->{LUMINOSITY}     = sprintf('%4.2f',$luminosity);
  # $_->{TYPE}           = $color->getColorType(value => $value);
  my $ct = $color->getColorType(value => $value);

  $_->{TYPE}  = $ct->{TYPE};
  $_->{SHADE} = $ct->{SHADE};

  $_->{CONTRAST_BLACK} = sprintf('%4.2f',$color->computeContrast(hex1 => BLACK,hex2 => $value));
  $_->{CONTRAST_GRAY}  = sprintf('%4.2f',$color->computeContrast(hex1 => GRAY, hex2 => $value));
  $_->{CONTRAST_WHITE} = sprintf('%4.2f',$color->computeContrast(hex1 => WHITE,hex2 => $value));
  $_->{DISTANCE_BLACK} = sprintf('%4.2f',$color->computeDistance(hex1 => BLACK,hex2 => $value));
}
say join ',',@keys;
say join ',',@{$_}{@keys} for sort { $b->{CONTRAST_WHITE} <=> $a->{CONTRAST_WHITE} } @{$color->colors};
