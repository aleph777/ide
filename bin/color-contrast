#!/usr/bin/env -S perl   # -*-Perl-*-

#         Copyright Â© 2020-2023 Tom Fontaine

# Title:  color-distance
# Author: Tom Fontaine
# Date:   14-Sep-2020

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software",
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# Except as contained in this notice, the name(s of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.

# The software is provided "As Is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall
# the authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising
# from, out of or in connection with the software or the use or other
# dealings in the software.

#
# Purpose:   computes constrast from input color to white
#
# Arguments: input color (hex rgb)
#
# Revision:  12-Jun-2023 new shebang
#                        use Modern::Perl
#
use Modern::Perl;
use Util::Color;

use constant _ME_ => $0 =~ m=([^/]+)$=;

sub computeLuminance
{
  my ($red,$green,$blue) = @_;

  # if RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4
  #
  my $r = $red   <= 0.03928 ? $red/12.92   : (($red   + 0.055)/1.055)**2.4;
  my $g = $green <= 0.03928 ? $green/12.92 : (($green + 0.055)/1.055)**2.4;
  my $b = $blue  <= 0.03928 ? $blue/12.92  : (($blue  + 0.055)/1.055)**2.4;

  return 0.2126*$r + 0.7152*$g + 0.0722*$b;
}

sub computeContrast
{
  my ($l1,$l2) = @_;

  return $l1 > $l2 ? ($l1 + 0.05)/($l2 + 0.05) : ($l2 + 0.05)/($l1 + 0.05);
}

my ($red,$green,$blue) = map { hex($_)/255 } (substr($ARGV[0],0,2),substr($ARGV[0],2,2),substr($ARGV[0],4,2));

say computeContrast(computeLuminance($red,$green,$blue),computeLuminance(1,1,1));
