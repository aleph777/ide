#!/usr/bin/perl -w    # -*-Perl-*-

#         Copyright Â© 2008-2019 Tom Fontaine

# Title:  trim
# Author: Tom Fontaine
# Date:   11-May-2008

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software",
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# Except as contained in this notice, the name(s of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.

# The software is provided "As Is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall
# the authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising
# from, out of or in connection with the software or the use or other
# dealings in the software.

# Purpose:   Trim excess whitespace from text files
#
# Arguments: filespec1 [filespec2 ... filespecN]
#
# Revision:  03-Apr-2015 Changed inner for loop to statement
#            21-Apr-2015 Check that files needs to be written
#
use Digest::SHA;
use File::IO;
use strict;

use constant _ME_ => $0 =~ m=([^/]+)$=;

my @files = grep { -T } @ARGV;

die "Usage: ",_ME_," file1 [file2 ... fileN]\n" unless @files;

my $file = File::IO->new(chomp => 1,newline => 1);

for(@files)
{
  $file->get(path => $_);

  if($file->contents->[-1] =~ /^\s*$/)
  {
    # file definitely needs to be trimmed - don't bother with checksum
    #
    s/\s+$// for @{$file->contents};

    pop @{$file->contents} while $file->contents->[-1] eq '';

    $file->put(path => $_);
  }
  else
  {
    # file might need to be trimmed, but there are no blank lines at EOF
    #
    my $sha  = Digest::SHA->new(1);

    $sha->add(@{$file->contents});

    my $checksumOld = $sha->hexdigest;

    s/\s+$// for @{$file->contents};

    $sha->add(@{$file->contents});

    my $checksumNew = $sha->hexdigest;

    $file->put(path => $_) if $checksumOld ne $checksumNew;
  }
}
